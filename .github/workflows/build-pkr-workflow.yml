name: Packer Build

# on:
#   push:
#     branches:
#       - main

on:
  pull_request:
    branches:
      - main

jobs:
  build_packer:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    env:
        PORT: ${{ secrets.PORT }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_DIALECT: ${{ secrets.DATABASE_DIALECT }}
        DROP_DATABASE: ${{ secrets.DROP_DATABASEÂ }}
        TOPIC_VERIFY_EMAIL: ${{ secrets.TOPIC_VERIFY_EMAIL }}
        VERIFY_EMAIL_EXPIRY_MILLISECONDS: ${{ secrets.VERIFY_EMAIL_EXPIRY_MILLISECONDS }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Postgres
      run: |
        sudo systemctl start postgresql.service

        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATABASE_NAME }};"
        sudo -u postgres psql -c "CREATE USER ${{ secrets.DATABASE_USERNAME }} WITH PASSWORD '${{ secrets.DATABASE_PASSWORD }}';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATABASE_NAME }} TO ${{ secrets.DATABASE_USERNAME}};"

    - name: Setup Logger Directory
      run: |
          sudo mkdir /var/log/webapp
          echo "Logger directory created at /var/log/webapp"
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependecies and run tests
      run: | 
        npm install
        npm run test

    - name: Delete node_modules for faster creation of artifact
      run: rm -r node_modules

    - name: Zip webapp
      run: cd ../ && zip -r webapp.zip webapp && cd - && cp ../webapp.zip .

    - name: Install Packer
      run: sudo apt install -y packer    
    
    - name: GCP Authentication
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: GCloud Info
      run: gcloud info

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: '1.10.1'

    - name: Packer Init
      run: packer init ./packer

    - name: Packer Format
      run: packer fmt -check ./packer
    
    - name: Packer Validate
      run: packer validate ./packer

    - name: Generate Timestamp
      id: generate_timestamp
      run: |
        TIMESTAMP=$(date +%s)
        echo "Timestamp: $TIMESTAMP"
        echo "::set-output name=TIMESTAMP::$TIMESTAMP"

    - name: Create Image Name
      id: create_image_name
      run: |
        IMAGE_NAME="${{ secrets.IMAGE_NAME_PREFIX }}-${{ steps.generate_timestamp.outputs.TIMESTAMP }}"
        echo "Image Name: $IMAGE_NAME"
        echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"

    - name: Create Image Family Name
      id: create_image_family
      run: |
        IMAGE_FAMILY="${{ secrets.IMAGE_FAMILY }}"
        echo "Image Family Name: $IMAGE_FAMILY"
        echo "::set-output name=IMAGE_FAMILY::$IMAGE_FAMILY"

    - name: Packer Build
      run: packer build -var 'proj_id=${{ secrets.GCP_PROJ_ID }}' -var 'region=${{ secrets.PROJECT_REGION }}' -var 'img_name=${{ steps.create_image_name.outputs.IMAGE_NAME }}' -var 'img_family=${{ steps.create_image_family.outputs.IMAGE_FAMILY }}' ./packer

    - name: Create new Instance Template version
      id: create_instance_template
      run: |
        NEW_INSTANCE_TEMPLATE_NAME="webapp-instance-template-${{ steps.generate_timestamp.outputs.TIMESTAMP }}"
        OLD_INSTANCE_TEMPLATE_NAME=$(gcloud compute instance-templates list --sort-by=creationTimestamp --limit=1 --format="value(name)")
        REGION=${{ secrets.PROJECT_REGION }}
        MACHINE_TYPE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.machineType)")
        NETWORK=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.networkInterfaces.network)")
        SUBNET=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.networkInterfaces.subnetwork)")
        NEW_IMAGE_LINK=$(gcloud compute images describe ${{ steps.create_image_name.outputs.IMAGE_NAME }} --format="value(selfLink)")
        BOOT_DISK_KMS_KEY=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.diskEncryptionKey.kmsKeyName)")
        BOOT_DISK_SIZE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.initializeParams.diskSizeGb)")
        BOOT_DISK_TYPE=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.disks.initializeParams.diskType)")
        LABELS=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.labels)")
        TAGS=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.tags.items)")
        METADATA=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.metadata.items.value)")
        SERVICE_ACCOUNT=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.serviceAccounts.email)")
        SCOPES=$(gcloud compute instance-templates describe ${OLD_INSTANCE_TEMPLATE_NAME} --region=${REGION} --format="value(properties.serviceAccounts.scopes)")
        SCOPES=$(echo "$SCOPES" | sed "s/\[\|\]//g")
        SCOPES=$(echo "$SCOPES" | sed "s/ *', *'/,/g")
        SCOPES=$(echo "$SCOPES" | sed "s/^'//;s/'$//")
        echo "Initialised New Instance Template Variables"
        gcloud compute instance-templates create ${NEW_INSTANCE_TEMPLATE_NAME} \
        --instance-template-region=${REGION} \
        --machine-type=${MACHINE_TYPE} \
        --region=${REGION} \
        --network=${NETWORK} \
        --subnet=${SUBNET} \
        --create-disk=image=${NEW_IMAGE_LINK},boot=yes,auto-delete=yes,device-name=persistent-disk-0,size=${BOOT_DISK_SIZE},type=${BOOT_DISK_TYPE},kms-key=${BOOT_DISK_KMS_KEY} \
        --labels=${LABELS} \
        --tags=${TAGS} \
        --metadata=startup-script="${METADATA}" \
        --service-account=${SERVICE_ACCOUNT} \
        --scopes=${SCOPES} \
        --reservation-affinity=any
        echo "Instance Template Created"
          echo "::set-output name=NEW_INSTANCE_TEMPLATE_NAME::$NEW_INSTANCE_TEMPLATE_NAME"

    - name: Update Managed Instance Group
      id: update_managed_instance_group
      run: |
        REGION=${{ secrets.PROJECT_REGION }}
        NEW_INSTANCE_TEMPLATE_LINK=$(gcloud compute instance-templates describe ${{ steps.create_instance_template.outputs.NEW_INSTANCE_TEMPLATE_NAME }} --region=${REGION} --format="value(selfLink)")
        MANAGED_INSTANCE_GROUP_NAME=$(gcloud compute instance-groups managed list --sort-by=creationTimestamp --limit=1 --format="value(name)")
        echo "Initialised New Managed Instance Group Variables"
        gcloud compute instance-groups managed rolling-action start-update ${MANAGED_INSTANCE_GROUP_NAME} --version template=${NEW_INSTANCE_TEMPLATE_LINK} --region=${REGION}
        echo "Managed Instance Group Updated"
        echo "::set-output name=MANAGED_INSTANCE_GROUP_NAME::$MANAGED_INSTANCE_GROUP_NAME"

    - name: Wait Until Managed Instance Group is Stable
      id: wait_until_managed_instance_group_is_stable
      run: |
        REGION=${{ secrets.PROJECT_REGION }}
        gcloud compute instance-groups managed wait-until ${{ steps.update_managed_instance_group.outputs.MANAGED_INSTANCE_GROUP_NAME }} \
        --version-target-reached \
        --region=${REGION}
        echo "Managed Instance group is stable"






