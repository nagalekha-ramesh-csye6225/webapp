name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  build_packer:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    env:
        PORT: ${{ secrets.PORT }}
        DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
        DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
        DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
        DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
        DATABASE_DIALECT: ${{ secrets.DATABASE_DIALECT }}
        DROP_DATABASE: ${{ secrets.DROP_DATABASEÂ }}
        TOPIC_VERIFY_EMAIL: ${{ secrets.TOPIC_VERIFY_EMAIL }}
        VERIFY_EMAIL_EXPIRY_MILLISECONDS: ${{ secrets.VERIFY_EMAIL_EXPIRY_MILLISECONDS }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Postgres
      run: |
        sudo systemctl start postgresql.service

        sudo -u postgres psql -c "CREATE DATABASE ${{ secrets.DATABASE_NAME }};"
        sudo -u postgres psql -c "CREATE USER ${{ secrets.DATABASE_USERNAME }} WITH PASSWORD '${{ secrets.DATABASE_PASSWORD }}';"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.DATABASE_NAME }} TO ${{ secrets.DATABASE_USERNAME}};"

    - name: Setup Logger Directory
      run: |
          sudo mkdir /var/log/webapp
          echo "Logger directory created at /var/log/webapp"
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependecies and run tests
      run: | 
        npm install
        npm run test

    - name: Delete node_modules for faster creation of artifact
      run: rm -r node_modules

    - name: Zip webapp
      run: cd ../ && zip -r webapp.zip webapp && cd - && cp ../webapp.zip .

    - name: Install Packer
      run: sudo apt install -y packer    
    
    - name: GCP Authentication
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: GCloud Info
      run: gcloud info

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: '1.10.1'

    - name: Packer Init
      run: packer init ./packer

    - name: Packer Format
      run: packer fmt -check ./packer
    
    - name: Packer Validate
      run: packer validate ./packer

    - name: Packer Build
      run: packer build -var 'proj_id=${{ secrets.GCP_PROJ_ID }}' ./packer

    - name: Create new Instance Template version
      run: |
        template_name=${{ secrets.NEW_INSTANCE_TEMPLATE_NAME }}
        old_instance_template_name=$(gcloud compute instance-templates list --sort-by=creationTimestamp --format="value(name)" --limit=1)
        region_url=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${{ secrets.PROJECT_REGION }} --format="value(region)")
        region=$(basename $region_url)
        machine_type=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.machineType)")
        network=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.networkInterfaces.network)")
        subnetwork=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.networkInterfaces.subnetwork)")
        latest_image_name=$(gcloud compute images list --filter="${{ secrets.CUSTOM_IMAGE_FAMILY }}" --sort-by=~creationTimestamp --format="value(name)" --limit=1)
        latest_image_link=$(gcloud compute images describe ${latest_image_name} --format="value(selfLink)")
        boot_disk_kms_key=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.disks.diskEncryptionKey.kmsKeyName)")
        disk_size=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.disks.initializeParams.diskSizeGb)")
        disk_type=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.disks.initializeParams.diskType)")
        labels=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.labels)")
        tags=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.tags.items)")
        metadata=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.metadata.items.value)")
        service_account=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.serviceAccounts.email)")
        scopes=$(gcloud compute instance-templates describe ${old_instance_template_name} --region=${region} --format="value(properties.serviceAccounts.scopes)")
        scopes=$(echo "$scopes" | sed "s/\[\|\]//g")
        scopes=$(echo "$scopes" | sed "s/ *', *'/,/g")
        scopes=$(echo "$scopes" | sed "s/^'//;s/'$//")
        echo "Variables initialised"
        gcloud compute instance-templates create ${template_name} \
        --instance-template-region=${region} \
        --machine-type=${machine_type} \
        --region=${region} \
        --network=${network} \
        --subnet=${subnetwork} \
        --create-disk=image=${latest_image_link},boot=yes,auto-delete=yes,device-name=persistent-disk-0,size=${disk_size},type=${disk_type},kms-key=${boot_disk_kms_key} \
        --tags=${tags} \
        --metadata=startup-script='${metadata}' \
        --service-account=${service_account} \
        --scopes=${scopes} \
        --reservation-affinity=any
        echo "Created Instance Template"
        new_instance_template_self_link=$(gcloud compute instance-templates describe ${template_name} --region=${region} --format="value(selfLink)")
        managed_instance_group=$(gcloud compute instance-groups managed list --sort-by=creationTimestamp --format="value(name)" --limit=1)
        gcloud compute instance-groups managed rolling-action start-update  ${managed_instance_group} --version template=${new_instance_template_self_link} --region=${region}
        echo "Rolling Update initiated with new instance template"
        gcloud compute instance-groups managed wait-until ${managed_instance_group} \
        --version-target-reached \
        --region=${region}
        echo "Instance group is stable"





